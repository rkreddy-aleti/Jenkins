pipeline {
    agent any

    environment {
        // Define the AWS environment here
        EC2_INSTANCE_IP1 = '54.87.134.2'
        EC2_INSTANCE_IP2 = '98.82.1.209'
        SSH_CREDENTIALS_ID = 'jenkins-aws'
    }

    stages {
        stage('run commands on AWS first EC2') {
            steps {
                script {
                    // SSH into the EC2 instance and run multiple commands
                    sshagent([SSH_CREDENTIALS_ID]) {
                        sh '''
                            #!/bin/bash
                            echo "Starting SSH connection..."
                            echo "EC2 IP: ${EC2_INSTANCE_IP1}"

                            ssh -o StrictHostKeyChecking=no ubuntu@${EC2_INSTANCE_IP1} <<`EOF`
                                echo "Hey I am $(whoami) successfully logged in to $(hostname)."
                                
                                echo "The memory space of this instance:"
                                free -m
                                
                                echo "The disk space is:"
                                df -h
                                
                                echo "Installing Java"
                                sudo apt install default-jdk 

                                echo "All commands executed successfully, on first server."
                                echo "Thanks, logging off from the first-server."
                        '''
                    }
                }
            }
        }

        stage('generate report on first server') {
            steps {
                script {
                    //Generate the report here
                    sh 'echo "Build report content" > build-report.txt'
                }
            }
        }

        //Second server execution.
        stage('run commands on AWS second EC2') {
            steps {
                script {
                    // SSH into the EC2 instance and run multiple commands
                    sshagent([SSH_CREDENTIALS_ID]) {
                        sh '''
                            #!/bin/bash
                            echo "Starting SSH connection..."
                            echo "EC2 IP: ${EC2_INSTANCE_IP2}"

                            ssh -o StrictHostKeyChecking=no ubuntu@${EC2_INSTANCE_IP2} <<`EOF`
                                echo "Hey I am $(whoami) successfully logged in to $(hostname)."
                                
                                echo "The memory space of this instance:"
                                free -m
                                
                                echo "The disk space is:"
                                df -h
                                
                                echo "Installing Java"
                                sudo apt install default-jdk 

                                echo "All commands executed successfully, on second server."
                                echo "Thanks, logging off from the second-server."

                        '''
                    }
                }
            }
        }

        stage('generate report on second server') {
            steps {
                script {
                    //Generate the report here
                    sh 'echo "Build report content" > build-report.txt'
                }
            }
        }
    }
    post {
        always {
            script {
                // Save the console output to a file
                def consoleOutputFile = "console-output.txt"
                
                // Using shell command to capture the log
                writeFile file: consoleOutputFile, text: currentBuild.rawBuild.getLog().join('\n')
                
                // Archive the console output file
                archiveArtifacts artifacts: consoleOutputFile, allowEmptyArchive: true
            }
        }
        success {
            emailext attachmentsPattern: '**/console-output.txt, **/build-report.html',
                      body: '''The build was successful.

                      Please find the attached build report and console output.''',
                      subject: 'Build Success - ${JENKINS_JOB_NAME} #${BUILD_NUMBER}',
                      to: 'rkreddy.aleti@gmail.com'
        }
        failure {
            emailext attachmentsPattern: '**/console-output.txt, **/build-report.html',
                      body: '''The build failed.

                      Please find the attached build report and console output.''',
                      subject: 'Build Failure - ${JENKINS_JOB_NAME} #${BUILD_NUMBER}',
                      to: 'rkreddy.aleti@gmail.com'
        }
        
    }
}
