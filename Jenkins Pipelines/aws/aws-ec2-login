pipeline {
    agent any

    environment {
        // Define the AWS environment here
        EC2_INSTANCE_IP1 = '54.87.134.2'
        EC2_INSTANCE_IP2 = '98.82.1.209'
        SSH_CREDENTIALS_ID = 'jenkins-aws'
        CONSOLE_OUTPUT_FILE = 'console-output.html'
    }

    stages {
        stage('run commands on AWS first EC2') {
            steps {
                script {
                    // SSH into the EC2 instance and run multiple commands
                    sshagent([SSH_CREDENTIALS_ID]) {
                        sh '''
                            #!/bin/bash
                            echo "Starting SSH connection..."
                            echo "EC2 Server IP: ${EC2_INSTANCE_IP1}"

                            ssh -o StrictHostKeyChecking=no ubuntu@${EC2_INSTANCE_IP1} <<`EOF`
                                echo "Hey I am $(whoami) successfully logged in to $(hostname)."
                                
                                echo "The memory space of this instance:"
                                free -m
                                
                                echo "The disk space is:"
                                df -h
                                
                                echo "Installing Java"
                                sudo apt install default-jdk 

                                echo "All commands executed successfully, on first server."
                                echo "Thanks, logging off from the first-server."
                        '''
                    }
                }
            }
        }

        //Second server execution.
        stage('run commands on AWS second EC2') {
            steps {
                script {
                    // SSH into the EC2 instance and run multiple commands
                    sshagent([SSH_CREDENTIALS_ID]) {
                        sh '''
                            #!/bin/bash
                            echo "Starting SSH connection..."
                            echo "EC2 Server IP: ${EC2_INSTANCE_IP2}"

                            ssh -o StrictHostKeyChecking=no ubuntu@${EC2_INSTANCE_IP2} <<`EOF`
                                echo "Hey I am $(whoami) successfully logged in to $(hostname)."
                                
                                echo "The memory space of this instance:"
                                free -m
                                
                                echo "The disk space is:"
                                df -h
                                
                                echo "Installing Java"
                                sudo apt install default-jdk 

                                echo "All commands executed successfully, on second server."
                                echo "Thanks, logged off from the second-server."

                        '''
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                // Write the console output to a file
                def logLines = currentBuild.rawBuild.getLog()
                def consoleOutput = logLines.join('\n')
                
                writeFile file: env.CONSOLE_OUTPUT_FILE, text: consoleOutput

                // Archive the artifacts
                archiveArtifacts artifacts: "${env.CONSOLE_OUTPUT_FILE}, allowEmptyArchive: true"
            }
        }
        success {
            script {
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                emailext(
                    attachmentsPattern: "${env.CONSOLE_OUTPUT_FILE}",
                    body: '''The build was successful.

                    Please find the attached build report and console output.''',
                    subject: "Build Success - ${jobName} #${buildNumber}",
                    to: 'rkreddy.aleti@gmail.com'
                )
            }
        }
        failure {
            script {
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                emailext(
                    attachmentsPattern: "${env.CONSOLE_OUTPUT_FILE}",
                    body: '''The build failed.

                    Please find the attached build report and console output.''',
                    subject: "Build Failure - ${jobName} #${buildNumber}",
                    to: 'rkreddy.aleti@gmail.com'
                )
            }
        }
    }
}
