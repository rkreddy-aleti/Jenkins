Installing Jenkins 

The procedures in this chapter are for new installations of Jenkins.

Jenkins is typically run as a standalone application in its own process. The Jenkins WAR file bundles Winstone, a Jetty servlet container wrapper, and can be started on any operating system or platform with a version of Java supported by Jenkins.

Theoretically, Jenkins can also be run as a servlet in a traditional servlet container like Apache Tomcat or WildFly, but in practice this is largely untested and there are many caveats. In particular, support for WebSocket agents is only implemented for the Jetty servlet container. See the Servlet Container Support Policy page for details.

Installing though Docker:
=========================
Docker is a platform for running applications in an isolated environment called a "container" (or Docker container). Applications like Jenkins can be downloaded as read-only "images" (or Docker images), each of which is run in Docker as a container. A Docker container is a "running instance" of a Docker image. A Docker image is stored permanently, based on when image updates are published, whereas containers are stored temporarily.

Due to Docker’s fundamental platform and container design, a Docker image for a given application, such as Jenkins, can be run on any supported operating system or cloud service also running Docker. Supported operating systems include macOS, Linux and Windows, and supported cloud services include AWS and Azure.

Prerequisites:
Minimum hardware requirements:
	256 MB of RAM
	1 GB of drive space (although 10 GB is a recommended minimum if running Jenkins as a Docker container)
Recommended hardware configuration for a small team:
	4 GB+ of RAM
	50 GB+ of drive space

Software requirements:
Java: see the Java Requirements page
Web browser: see the Web Browser Compatibility page
For Windows operating system: Windows Support Policy
For Linux operating system: Linux Support Policy
For servlet containers: Servlet Container Support Policy

Downloading and running Jenkins in Docker
There are several Docker images of Jenkins available.

Use the recommended official jenkins/jenkins image from the Docker Hub repository. This image contains the current Long-Term Support (LTS) release of Jenkins, which is production-ready. However, this image doesn’t contain Docker CLI, and is not bundled with the frequently used Blue Ocean plugins and its features.

On macOS and Linux:

1. Open up a terminal window.
2. Create a bridge network in Docker using the following docker network create command:
	Command: 
	docker network create jenkins
3. In order to execute Docker commands inside Jenkins nodes, download and run the docker:dind Docker image using the following docker run,
	Command: 
	docker run --name jenkins-docker --rm --detach \
	  --privileged --network jenkins --network-alias docker \
	  --env DOCKER_TLS_CERTDIR=/certs \
	  --volume jenkins-docker-certs:/certs/client \
	  --volume jenkins-data:/var/jenkins_home \
	  --publish 2376:2376 \
	  docker:dind --storage-driver overlay2
4. Customize the official Jenkins Docker image, by executing the following two steps: Dockerfile attached in the folder.
	Command to create docker file:
	docker build -t myjenkins-blueocean:2.462.1-1 .
5. Run your own myjenkins-blueocean:2.462.1-1 image as a container in Docker using the following docker run
	Command:
	docker run --name jenkins-blueocean --restart=on-failure --detach \
	  --network jenkins --env DOCKER_HOST=tcp://docker:2376 \
	  --env DOCKER_CERT_PATH=/certs/client --env DOCKER_TLS_VERIFY=1 \
	  --publish 8080:8080 --publish 50000:50000 \
	  --volume jenkins-data:/var/jenkins_home \
	  --volume jenkins-docker-certs:/certs/client:ro \
	  myjenkins-blueocean:2.462.1-1
	  
On Windows:

1. Open up a command prompt window and similar to the macOS and Linux instructions above do the following:
2. Create a bridge network in Docker
3. Run a docker:dind Docker image
	Command:
	docker run --name jenkins-docker --rm --detach ^
	  --privileged --network jenkins --network-alias docker ^
	  --env DOCKER_TLS_CERTDIR=/certs ^
	  --volume jenkins-docker-certs:/certs/client ^
	  --volume jenkins-data:/var/jenkins_home ^
	  --publish 2376:2376 ^
	  docker:dind
4. Run your own myjenkins-blueocean:2.462.1-1 image as a container in Docker using the following docker run,
	Command:
	docker run --name jenkins-blueocean --restart=on-failure --detach ^
	  --network jenkins --env DOCKER_HOST=tcp://docker:2376 ^
	  --env DOCKER_CERT_PATH=/certs/client --env DOCKER_TLS_VERIFY=1 ^
	  --volume jenkins-data:/var/jenkins_home ^
	  --volume jenkins-docker-certs:/certs/client:ro ^
	  --publish 8080:8080 --publish 50000:50000 myjenkins-blueocean:2.462.1-1

Post-installation setup:

After downloading, installing and running Jenkins using one of the procedures above (except for installation with Jenkins Operator), the post-installation setup wizard begins.
This setup wizard takes you through a few quick "one-off" steps to unlock Jenkins, customize it with plugins and create the first administrator user through which you can continue accessing Jenkins.
Unlocking Jenkins
When you first access a new Jenkins controller, you are asked to unlock it using an automatically-generated password.
Browse to http://localhost:8080 (or whichever port you configured for Jenkins when installing it) and wait until the Unlock Jenkins page.

In Docker, execute the below command to see the admin password,
	Command:
	sudo docker exec -it jenkins-docker cat /var/lib/jenkins/secrets/initialAdminPassword

In Linux, execute the below command to see the admin password,
	Command:
	sudo cat /var/lib/jenkins/secrets/initialAdminPassword


Enter the admin password in the UI console and start using the Jenkins tool.




	






